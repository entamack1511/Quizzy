#!/usr/bin/env node
'use strict';

var chunkITNVZIXX_js = require('./chunk-ITNVZIXX.js');
var chunkKXSLPKCE_js = require('./chunk-KXSLPKCE.js');

var w=chunkKXSLPKCE_js.c((J,d)=>{var K=chunkKXSLPKCE_js.a("fs"),L=chunkKXSLPKCE_js.a("path");function S(e){console.log(`[dotenv][DEBUG] ${e}`);}var $=`
`,P=/^\s*([\w.-]+)\s*=\s*(.*)?\s*$/,W=/\\n/g,Y=/\n|\r|\r\n/;function k(e,t){let n=!!(t&&t.debug),i={};return e.toString().split(Y).forEach(function(r,s){let a=r.match(P);if(a!=null){let c=a[1],o=a[2]||"",l=o.length-1,u=o[0]==='"'&&o[l]==='"';o[0]==="'"&&o[l]==="'"||u?(o=o.substring(1,l),u&&(o=o.replace(W,$))):o=o.trim(),i[c]=o;}else n&&S(`did not match key and value when parsing line ${s+1}: ${r}`);}),i}function G(e){let t=L.resolve(process.cwd(),".env"),n="utf8",i=!1;e&&(e.path!=null&&(t=e.path),e.encoding!=null&&(n=e.encoding),e.debug!=null&&(i=!0));try{let r=k(K.readFileSync(t,{encoding:n}),{debug:i});return Object.keys(r).forEach(function(s){Object.prototype.hasOwnProperty.call(process.env,s)?i&&S(`"${s}" is already defined in \`process.env\` and will not be overwritten`):process.env[s]=r[s];}),{parsed:r}}catch(r){return {error:r}}}d.exports.config=G;d.exports.parse=k;});var E={};chunkKXSLPKCE_js.d(E,{main:()=>M});async function M(e){let{code:t}=await chunkITNVZIXX_js.k({argv:e});process.exit(t);}var O=chunkKXSLPKCE_js.b(()=>{chunkITNVZIXX_js.n();});var D={};chunkKXSLPKCE_js.d(D,{main:()=>H});async function H(e){let{flags:t,input:n}=(0, _.default)(`
    Usage
      $ chromatic trace [-b|--base-dir] [-c|--config-dir] [-s|--stats-file] [-u|--untraced] [-m|--mode] [<changed files>...]

    Options
      <changed files>...                    List of changed files relative to repository root.
      --stats-file, -s <filepath>           Path to preview-stats.json. Alternatively, set WEBPACK_STATS_FILE. (default: 'storybook-static/preview-stats.json')
      --storybook-base-dir, -b <dirname>    Relative path from repository root to Storybook project root. Alternatively, set STORYBOOK_BASE_DIR. Use when your Storybook is located in a subdirectory of your repository.
      --storybook-config-dir, -c <dirname>  Directory where to load Storybook configurations from. Alternatively, set STORYBOOK_CONFIG_DIR. (default: '.storybook')
      --untraced, -u <filepath>             Disregard these files and their dependencies. Globs are supported via picomatch. This flag can be specified multiple times.
      --mode, -m <mode>                     Set to 'expanded' to reveal the underlying list of files for each bundle, or set to 'compact' to only show a flat list of affected story files.
    `,{argv:e,description:"Trace utility for TurboSnap",flags:{statsFile:{type:"string",alias:"s",default:V||"storybook-static/preview-stats.json"},storybookBaseDir:{type:"string",alias:"b",default:U||"."},storybookConfigDir:{type:"string",alias:"c",default:Q||".storybook"},untraced:{type:"string",alias:"u",isMultiple:!0},mode:{type:"string",alias:"m"}}}),i={log:console,options:{storybookBaseDir:t.storybookBaseDir,storybookConfigDir:t.storybookConfigDir,untraced:t.untraced,traceChanged:t.mode||!0}},r=await chunkITNVZIXX_js.c(t.statsFile),s=n.map(c=>c.replace(/^\.\//,"")),a=s.find(c=>chunkITNVZIXX_js.g(c));if(a)throw new Error(`Unable to trace package manifest file (${a}) as that would require diffing file contents.`);await chunkITNVZIXX_js.i(i,r,t.statsFile,s);}var _,U,Q,V,B=chunkKXSLPKCE_js.b(()=>{_=chunkKXSLPKCE_js.e(chunkITNVZIXX_js.b());chunkITNVZIXX_js.j();chunkITNVZIXX_js.d();chunkITNVZIXX_js.h();({STORYBOOK_BASE_DIR:U,STORYBOOK_CONFIG_DIR:Q,WEBPACK_STATS_FILE:V}=process.env);});w().config();var F={main:()=>(O(),chunkKXSLPKCE_js.f(E)).main(process.argv.slice(2)),trace:()=>(B(),chunkKXSLPKCE_js.f(D)).main(process.argv.slice(3)),"trim-stats-file":()=>(chunkITNVZIXX_js.f(),chunkKXSLPKCE_js.f(chunkITNVZIXX_js.e)).main(process.argv.slice(3))};(F[process.argv[2]]||F.main)();
